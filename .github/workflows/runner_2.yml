name: CI Checks 1

on:
  pull_request:
    branches:
      - develop
      - release-*

jobs:
  install_third_party_dependencies:
    runs-on:  ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        suite:
          - adminPage
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8.15'
          architecture: 'x64'
          cache: 'pip'
          cache-dependency-path: |
            requirements.in
            requirements.txt
            requirements_dev.in
            requirements_dev.txt
      - name: Setup python by installing wheel
        run: pip install wheel==0.35.0
        shell: bash
      - uses: ./.github/actions/merge
      - name: Install python2
        run: |
          sudo apt-get update
          sudo apt-get install python2
      - name: Cache third party dependencies
        uses: actions/cache@v3
        env:
          cache-name: cache-third-party-dependencies
        with:
          path: |
            /home/runner/work/oppia/oppia/third_party
            /home/runner/work/oppia/oppia/node_modules
            /home/runner/work/oppia/yarn_cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock', 'dependencies.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Check if dependencies are cached
        id: check-cache
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/work/oppia/oppia/third_party
            /home/runner/work/oppia/oppia/node_modules
            /home/runner/work/oppia/yarn_cache
            ...
          # We can change the key depending on the dependencies we are using
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock', 'dependencies.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          # Install dependencies
          echo "Installing dependencies"
          python -m scripts.install_third_party_libs
        shell: bash
      - name: Cache dependencies
        if: steps.check-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/work/oppia/oppia/third_party
            /home/runner/work/oppia/oppia/node_modules
            /home/runner/work/oppia/yarn_cache
            ...
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock', 'dependencies.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: |
          # Replace the 1.5 second timeout in lighthouse for retrieving
          # sourcemaps with a 10 second timeout. This timeout is not
          # configurable through Lighthouse's exposed API, so we have
          # resorted to patching the code instead.
          set -e
          FILEPATH=$GITHUB_WORKSPACE/node_modules/lighthouse/lighthouse-core/gather/gatherers/source-maps.js
          SEARCH_TARGET="1500"
          REPLACEMENT="10000"
          occurrences=$(grep -c $SEARCH_TARGET $FILEPATH)
          echo "Found $occurrences occurrences of '$SEARCH_TARGET'"
          # Assert that there is only one match for the target string.
          # If there are ever zero or multiple matches, the lighthouse
          # code has changed and this logic needs to be reviewed.
          [[ $occurrences == "1" ]]
          # Replace the target string with the replacement string.
          sed -i 's/$SEARCH_TARGET/$REPLACEMENT/' $FILEPATH
          echo "Replaced '$SEARCH_TARGET' with '$REPLACEMENT' in $FILEPATH"
        shell: bash
      - name: Install chrome
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: python -m scripts.install_chrome_for_ci
      - name: Run Lighthouse accessibility checks shard
        if: startsWith(github.head_ref, 'update-changelog-for-release') == false
        run: python -m scripts.run_lighthouse_tests --mode accessibility --shard ${{ matrix.shard }}
      - name: Report failure if failed on oppia/oppia develop branch
        if: ${{ failure() && github.event_name == 'push' && github.repository == 'oppia/oppia' && github.ref == 'refs/heads/develop'}}
        uses: ./.github/actions/send-webhook-notification
        with:
          message: "A Lighthouse test failed on the upstream develop branch."
          webhook-url: ${{ secrets.BUILD_FAILURE_ROOM_WEBHOOK_URL }}
